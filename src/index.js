/* eslint-disable linebreak-style */
/* eslint-disable react/react-in-jsx-scope, react/jsx-filename-extension, no-unused-vars */

/* @jsx createElement */
function createElement(tagName, props, ...children) {
  const element = document.createElement(tagName);

  Object.entries(props || {}).forEach(([key, value]) => {
    element[key.toLowerCase()] = value;
  });

  children.flat().forEach((child) => {
    if (child instanceof Node) {
      element.appendChild(child);
      return;
    }
    element.appendChild(document.createTextNode(child));
  });

  return element;
}

// ÏóòÎ¶¨Î®ºÌä∏
const app = document.getElementById('app');

const operators = ['+', '-', '*', '/', '='];
const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

/**
 * ÏûÖÎ†•Ìïú Í∞íÏùÑ Ï∂îÍ∞ÄÌï† Î∞∞Ïó¥
 *
 * @type {string[]}
 */
let inputs = [];

/*
  üôå ÏßàÎ¨∏ spliceÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ∏∞ ÏúÑÌï¥ÏÑú inputsÎ•º letÏúºÎ°ú ÏÑ†Ïñ∏ÌñàÏäµÎãàÎã§.
  Ïù¥Îïå, ÏßÅÏ†ë Í∞íÏùÑ Ìï†ÎãπÌïòÎäî Í≤ÉÎ≥¥Îã§ Í∞íÏùÑ Ìï†ÎãπÌïòÎäî Ìï®ÏàòÎ•º ÎßåÎì§Î©¥ Ïñ∏Ï†ú inputsÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäîÏßÄ ÌôïÏù∏Ìï† Ïàò ÏûàÏùÑ Í≤É Í∞ôÏïÑÏÑú Ïù¥ Ìï®ÏàòÎ•º ÎßåÎì§ÏóàÎäîÎç∞,
  Î∂àÌïÑÏöîÌïú Î°úÏßÅÏù∏ÏßÄ? Í∂ÅÍ∏àÌï©ÎãàÎã§.
 */
function updateInputs(newInputs = []) {
  inputs = newInputs;
}

// ÏûÖÎ†• Í∞í ÎπÑÏö∞Í∏∞
function clearInputs() {
  updateInputs([]);
}

// ÏûÖÎ†•Ìïú Í∞íÏù¥ ÏóÜÎäîÏßÄ ÌåêÎã®
function isInputEmpty() {
  return inputs.length === 0;
}

function getLastInput() {
  return inputs[inputs.length - 1] ?? null;
}

// ÏûÖÎ†•Îêú Í∞íÏù¥ Ïó∞ÏÇ∞ÏûêÏù∏ÏßÄ ÌåêÎã®
function isOperator(operator) {
  return operator && operators.includes(operator);
}

function isEqualOperator(operator) {
  return operator === '=';
}

function isCalculationAvailable() {
  const [num1, operator, num2] = inputs;

  return isOperator(operator) && !!num1 && !!num2;
}

const operations = {
  '+': (num1, num2) => num1 + num2,
  '-': (num1, num2) => num1 - num2,
  '*': (num1, num2) => num1 * num2,
  '/': (num1, num2) => num1 / num2,
};

function calculate() {
  const [num1, operator, num2] = inputs;

  return operations[operator](parseFloat(num1), parseFloat(num2)).toString();
}

function render(result = '') {
  // Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  function handleClickNumber(num = 0) {
    if (isInputEmpty()) {
      const newInputs = [...inputs, num];

      updateInputs(newInputs);

      render(num);
      return;
    }

    const lastInput = getLastInput();

    if (isOperator(lastInput)) {
      const newInputs = [...inputs, num];

      updateInputs(newInputs);

      render(num);
    } else {
      const newInput = lastInput + num;

      const newInputs = [...inputs.slice(0, inputs.length - 1), newInput];

      updateInputs(newInputs);

      render(newInput);
    }
  }

  function handleClickOperator(operator = '') {
    if (isInputEmpty()) return;

    const lastInput = getLastInput();

    if (isOperator(lastInput)) return;

    if (isCalculationAvailable()) {
      const calculationResult = calculate();

      updateInputs([calculationResult]);

      render(calculationResult);

      if (!isEqualOperator(operator)) inputs.push(operator);
    } else {
      inputs.push(operator);
    }
  }

  const element = (
    <div className="calculator">
      <p>Í∞ÑÎã® Í≥ÑÏÇ∞Í∏∞</p>

      <div className="calculator__result">
        { result }
      </div>

      <div className="calculator__buttons">
        {/* Ïà´Ïûê ÌÇ§ */}
        {
          numbers.map((num) => (
            <button type="button" onClick={() => handleClickNumber(num)}>
              {num}
            </button>
          ))
        }
        {/* Ïó∞ÏÇ∞Ïûê ÌÇ§ */}
        {
          operators.map((operator) => (
            <button type="button" onClick={() => handleClickOperator(operator)}>
              {operator}
            </button>
          ))
        }
      </div>
    </div>
  );

  app.textContent = '';
  app.appendChild(element);
}

render();
